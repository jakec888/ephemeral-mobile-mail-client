{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Platform } from '@unimodules/core';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport { getEmbeddedAssetUri } from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from \"./PlatformUtils\";\nimport resolveAssetSource from \"./resolveAssetSource\";\n\nvar Asset = (() => {\n  class Asset {\n    constructor(_ref) {\n      var {\n        name,\n        type,\n        hash = null,\n        uri,\n        width,\n        height\n      } = _ref;\n      this.hash = null;\n      this.localUri = null;\n      this.width = null;\n      this.height = null;\n      this.downloading = false;\n      this.downloaded = false;\n      this._downloadCallbacks = [];\n      this.name = name;\n      this.type = type;\n      this.hash = hash;\n      this.uri = uri;\n\n      if (typeof width === 'number') {\n        this.width = width;\n      }\n\n      if (typeof height === 'number') {\n        this.height = height;\n      }\n\n      if (hash) {\n        this.localUri = getEmbeddedAssetUri(hash, type);\n\n        if (this.localUri) {\n          this.downloaded = true;\n        }\n      }\n\n      if (Platform.OS === 'web') {\n        if (!name) {\n          this.name = AssetUris.getFilename(uri);\n        }\n\n        if (!type) {\n          this.type = AssetUris.getFileExtension(uri);\n        }\n      }\n    }\n\n    static loadAsync(moduleId) {\n      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n      return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n    }\n\n    static fromModule(virtualAssetModule) {\n      if (typeof virtualAssetModule === 'string') {\n        return Asset.fromURI(virtualAssetModule);\n      }\n\n      var meta = getAssetByID(virtualAssetModule);\n\n      if (!meta) {\n        throw new Error(\"Module \\\"\".concat(virtualAssetModule, \"\\\" is missing from the asset registry\"));\n      }\n\n      if (!IS_ENV_WITH_UPDATES_ENABLED) {\n        var {\n          uri\n        } = resolveAssetSource(virtualAssetModule);\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: meta.hash,\n          uri,\n          width: meta.width,\n          height: meta.height\n        });\n\n        if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n          asset.localUri = asset.uri;\n          asset.downloaded = true;\n        }\n\n        Asset.byHash[meta.hash] = asset;\n        return asset;\n      }\n\n      return Asset.fromMetadata(meta);\n    }\n\n    static fromMetadata(meta) {\n      var metaHash = meta.hash;\n\n      if (Asset.byHash[metaHash]) {\n        return Asset.byHash[metaHash];\n      }\n\n      var {\n        uri,\n        hash\n      } = AssetSources.selectAssetSource(meta);\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash,\n        uri,\n        width: meta.width,\n        height: meta.height\n      });\n      Asset.byHash[metaHash] = asset;\n      return asset;\n    }\n\n    static fromURI(uri) {\n      if (Asset.byUri[uri]) {\n        return Asset.byUri[uri];\n      }\n\n      var type = '';\n\n      if (uri.indexOf(';base64') > -1) {\n        type = uri.split(';')[0].split('/')[1];\n      } else {\n        var extension = AssetUris.getFileExtension(uri);\n        type = extension.startsWith('.') ? extension.substring(1) : extension;\n      }\n\n      var asset = new Asset({\n        name: '',\n        type,\n        hash: null,\n        uri\n      });\n      Asset.byUri[uri] = asset;\n      return asset;\n    }\n\n    downloadAsync() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this.downloaded) {\n          return;\n        }\n\n        if (_this.downloading) {\n          yield new Promise((resolve, reject) => {\n            _this._downloadCallbacks.push({\n              resolve,\n              reject\n            });\n          });\n          return;\n        }\n\n        _this.downloading = true;\n\n        try {\n          if (Platform.OS === 'web') {\n            if (ImageAssets.isImageType(_this.type)) {\n              var {\n                width,\n                height,\n                name\n              } = yield ImageAssets.getImageInfoAsync(_this.uri);\n              _this.width = width;\n              _this.height = height;\n              _this.name = name;\n            } else {\n              _this.name = AssetUris.getFilename(_this.uri);\n            }\n          }\n\n          _this.localUri = yield downloadAsync(_this.uri, _this.hash, _this.type, _this.name);\n          _this.downloaded = true;\n\n          _this._downloadCallbacks.forEach((_ref2) => {\n            var {\n              resolve\n            } = _ref2;\n            return resolve();\n          });\n        } catch (e) {\n          _this._downloadCallbacks.forEach((_ref3) => {\n            var {\n              reject\n            } = _ref3;\n            return reject(e);\n          });\n\n          throw e;\n        } finally {\n          _this.downloading = false;\n          _this._downloadCallbacks = [];\n        }\n      })();\n    }\n\n  }\n\n  Asset.byHash = {};\n  Asset.byUri = {};\n  return Asset;\n})();\n\nexport { Asset };","map":{"version":3,"sources":["../src/Asset.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport { getEmbeddedAssetUri } from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[]): Promise<void[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async downloadAsync(): Promise<void> {\n    if (this.downloaded) {\n      return;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}