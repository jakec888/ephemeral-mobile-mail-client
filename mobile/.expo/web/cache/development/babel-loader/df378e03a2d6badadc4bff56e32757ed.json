{"ast":null,"code":"var _jsxFileName = \"/Users/jaconcondes/Desktop/ephemeral-mobile-mail-client/mobile/screens/Trash/TrashScreen.js\";\nimport React, { Component, Fragment } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { connect } from 'react-redux';\nimport { Container, Spinner, ListItem, View, Body, Right, Text, Button } from 'native-base';\nimport moment from 'moment';\nimport { selectEmail } from \"../../redux/actions/selectEmail.action\";\nimport { retrieveEmails, loadingEmail } from \"../../redux/actions/retrieveEmail.actions\";\nexport class TrashScreen extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.componentDidMount = () => {\n      if (this.props.validCredentials) {\n        this.onRetrieveTrash();\n      } else {\n        this.props.navigation.navigate('Cred');\n      }\n    };\n\n    this.onRetrieveTrash = () => {\n      this.props.loadingEmail(true);\n      this.props.retrieveEmails('Trash');\n      this.props.loadingEmail(false);\n    };\n\n    this.onRefresh = () => {\n      this.onRetrieveTrash();\n    };\n\n    this.onSelectEmail = (emailId, name, email, subject, date) => {\n      this.props.selectEmail(emailId);\n      this.props.navigation.navigate('View', {\n        emailName: name,\n        emailEmail: email,\n        emailSubject: subject,\n        emailDate: date\n      });\n    };\n\n    this.emailView = (_ref) => {\n      var {\n        item\n      } = _ref;\n      var emailDate = new Date(item.date);\n      var calendar = moment(emailDate).format('ll');\n      var time = moment(emailDate).format('LT');\n      return React.createElement(ListItem, {\n        avatar: true,\n        onPress: () => {\n          this.onSelectEmail(item.id, item.name, item.email, item.subject, item.date);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, React.createElement(Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.hOneStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }, item.name), React.createElement(Text, {\n        style: styles.hTwoStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, item.subject), React.createElement(Text, {\n        note: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, item.body_plain ? ' â€” ' + item.body_plain.substring(0, 50) + '...' : false)), React.createElement(Right, {\n        style: styles.dateStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        note: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, calendar), React.createElement(Text, {\n        note: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, \"at\"), React.createElement(Text, {\n        note: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, time)));\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, this.props.loading ? React.createElement(View, {\n      style: styles.spinnerContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, React.createElement(Spinner, {\n      color: \"#3f51b5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, \"Retrieving Trash...\")) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, this.props.trashEmails ? React.createElement(FlatList, {\n      data: this.props.trashEmails,\n      renderItem: this.emailView,\n      keyExtractor: item => item.id,\n      refreshing: this.props.loading,\n      onRefresh: this.onRefresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }) : React.createElement(View, {\n      style: styles.spinnerContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, this.props.error ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }, \"Please Limit To Folders\"), React.createElement(Text, {\n      style: styles.errorTextBottom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, \"With Less Than 25 Emails\")) : React.createElement(Text, {\n      style: styles.errorTextBottom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }\n    }, \"No Emails\"), React.createElement(Button, {\n      primary: true,\n      full: true,\n      bordered: true,\n      rounded: true,\n      style: styles.button,\n      onPress: this.onRefresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: styles.buttonText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 19\n      }\n    }, \"Refresh\")))));\n  }\n\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  spinnerContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  hOneStyle: {\n    fontSize: 20,\n    fontWeight: '700'\n  },\n  hTwoStyle: {\n    fontSize: 15,\n    fontWeight: '500'\n  },\n  dateStyle: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    margin: '5%'\n  },\n  button: {\n    borderColor: '#3f51b5',\n    color: '#3f51b5',\n    alignSelf: 'center',\n    width: '50%'\n  },\n  buttonText: {\n    color: '#3f51b5'\n  }\n});\n\nvar mapStateToProps = state => ({\n  validCredentials: state.Profile.validCredentials,\n  trashEmails: state.RetrieveEmails.emails,\n  loading: state.RetrieveEmails.loading,\n  error: state.RetrieveEmails.error\n});\n\nvar mapDispatchToProps = {\n  selectEmail: selectEmail,\n  retrieveEmails: retrieveEmails,\n  loadingEmail: loadingEmail\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashScreen);","map":{"version":3,"sources":["/Users/jaconcondes/Desktop/ephemeral-mobile-mail-client/mobile/screens/Trash/TrashScreen.js"],"names":["React","Component","Fragment","connect","Container","Spinner","ListItem","View","Body","Right","Text","Button","moment","selectEmail","retrieveEmails","loadingEmail","TrashScreen","componentDidMount","props","validCredentials","onRetrieveTrash","navigation","navigate","onRefresh","onSelectEmail","emailId","name","email","subject","date","emailName","emailEmail","emailSubject","emailDate","emailView","item","Date","calendar","format","time","id","styles","hOneStyle","hTwoStyle","body_plain","substring","dateStyle","render","container","loading","spinnerContainer","trashEmails","error","errorTextBottom","button","buttonText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","buttonContainer","margin","borderColor","color","alignSelf","width","mapStateToProps","state","Profile","RetrieveEmails","emails","mapDispatchToProps"],"mappings":"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","sourcesContent":["/*\n  Trash List Screen\n\n  !!! limit 25 emails !!!\n\n  the api return a list of 25 emails from the labeled 'Trash' folder.\n  limit is 25 due to the imbox library which uses .uid() to build its query; the uid protocal does not allow for limits or ordering.\n\n  imbox library must be update.\n*/\n\nimport React, {Component, Fragment} from 'react';\nimport {StyleSheet, FlatList} from 'react-native';\nimport {connect} from 'react-redux';\nimport {\n  Container,\n  Spinner,\n  ListItem,\n  View,\n  Body,\n  Right,\n  Text,\n  Button,\n} from 'native-base';\n\nimport moment from 'moment';\n\nimport {selectEmail} from '../../redux/actions/selectEmail.action';\nimport {\n  retrieveEmails,\n  loadingEmail,\n} from '../../redux/actions/retrieveEmail.actions';\n\nexport class TrashScreen extends Component {\n  componentDidMount = () => {\n    if (this.props.validCredentials) {\n      this.onRetrieveTrash();\n    } else {\n      this.props.navigation.navigate('Cred');\n    }\n  };\n\n  onRetrieveTrash = () => {\n    this.props.loadingEmail(true);\n    this.props.retrieveEmails('Trash');\n    this.props.loadingEmail(false);\n  };\n\n  onRefresh = () => {\n    this.onRetrieveTrash();\n  };\n\n  onSelectEmail = (emailId, name, email, subject, date) => {\n    this.props.selectEmail(emailId);\n    this.props.navigation.navigate('View', {\n      emailName: name,\n      emailEmail: email,\n      emailSubject: subject,\n      emailDate: date,\n    });\n  };\n\n  emailView = ({item}) => {\n    const emailDate = new Date(item.date);\n\n    const calendar = moment(emailDate).format('ll');\n\n    const time = moment(emailDate).format('LT');\n\n    return (\n      <ListItem\n        avatar\n        onPress={() => {\n          this.onSelectEmail(\n            item.id,\n            item.name,\n            item.email,\n            item.subject,\n            item.date,\n          );\n        }}>\n        <Body>\n          <Text style={styles.hOneStyle}>{item.name}</Text>\n          <Text style={styles.hTwoStyle}>{item.subject}</Text>\n          <Text note>\n            {item.body_plain\n              ? ' â€” ' + item.body_plain.substring(0, 50) + '...'\n              : false}\n          </Text>\n        </Body>\n        <Right style={styles.dateStyle}>\n          <Text note>{calendar}</Text>\n          <Text note>at</Text>\n          <Text note>{time}</Text>\n        </Right>\n      </ListItem>\n    );\n  };\n\n  render() {\n    return (\n      <Container style={styles.container}>\n        {this.props.loading ? (\n          <View style={styles.spinnerContainer}>\n            <Spinner color=\"#3f51b5\" />\n            <Text>Retrieving Trash...</Text>\n          </View>\n        ) : (\n          <Fragment>\n            {this.props.trashEmails ? (\n              <FlatList\n                data={this.props.trashEmails}\n                renderItem={this.emailView}\n                keyExtractor={item => item.id}\n                refreshing={this.props.loading}\n                onRefresh={this.onRefresh}\n              />\n            ) : (\n              <View style={styles.spinnerContainer}>\n                {this.props.error ? (\n                  <Fragment>\n                    <Text>Please Limit To Folders</Text>\n                    <Text style={styles.errorTextBottom}>\n                      With Less Than 25 Emails\n                    </Text>\n                  </Fragment>\n                ) : (\n                  <Text style={styles.errorTextBottom}>No Emails</Text>\n                )}\n                <Button\n                  primary\n                  full\n                  bordered\n                  rounded\n                  style={styles.button}\n                  onPress={this.onRefresh}>\n                  <Text style={styles.buttonText}>Refresh</Text>\n                </Button>\n              </View>\n            )}\n          </Fragment>\n        )}\n      </Container>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  spinnerContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  hOneStyle: {\n    fontSize: 20,\n    fontWeight: '700',\n  },\n  hTwoStyle: {\n    fontSize: 15,\n    fontWeight: '500',\n  },\n  dateStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonContainer: {\n    margin: '5%',\n  },\n  button: {\n    borderColor: '#3f51b5',\n    color: '#3f51b5',\n    alignSelf: 'center',\n    width: '50%',\n  },\n  buttonText: {\n    color: '#3f51b5',\n  },\n});\n\nconst mapStateToProps = state => ({\n  validCredentials: state.Profile.validCredentials,\n  trashEmails: state.RetrieveEmails.emails,\n  loading: state.RetrieveEmails.loading,\n  error: state.RetrieveEmails.error,\n});\n\nconst mapDispatchToProps = {\n  selectEmail: selectEmail,\n  retrieveEmails: retrieveEmails,\n  loadingEmail: loadingEmail,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashScreen);\n"]},"metadata":{},"sourceType":"module"}