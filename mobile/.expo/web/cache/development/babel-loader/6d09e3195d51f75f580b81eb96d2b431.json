{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as ErrorRecovery from 'expo-error-recovery';\nimport * as React from 'react';\nexport default function withExpoRoot(AppRootComponent) {\n  return class ExpoRootComponent extends React.Component {\n    render() {\n      var props = _objectSpread(_objectSpread({}, this.props), {}, {\n        exp: _objectSpread(_objectSpread({}, this.props.exp), {}, {\n          errorRecovery: ErrorRecovery.recoveredProps\n        })\n      });\n\n      return React.createElement(AppRootComponent, _extends({}, props));\n    }\n\n  };\n}","map":{"version":3,"sources":["../../src/launch/withExpoRoot.web.tsx"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,KAAK,aAAZ,MAA+B,qBAA/B;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAIA,eAAc,SAAU,YAAV,CACZ,gBADY,EAC4B;AAExC,SAAO,MAAM,iBAAN,SAAgC,KAAK,CAAC,SAAtC,CAAkD;AACvD,IAAA,MAAM,GAAA;AACJ,UAAM,KAAK,mCACN,KAAK,KADC;AAET,QAAA,GAAG,kCAAO,KAAK,KAAL,CAAW,GAAlB;AAAuB,UAAA,aAAa,EAAE,aAAa,CAAC;AAApD;AAFM,QAAX;;AAKA,aAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,SAAA,EAAA,EAAK,KAAL,CAAjB,CAAP;AACD;;AARsD,GAAzD;AAUD","sourcesContent":["import * as ErrorRecovery from 'expo-error-recovery';\nimport * as React from 'react';\n\nimport { InitialProps } from './withExpoRoot.types';\n\nexport default function withExpoRoot<P extends InitialProps>(\n  AppRootComponent: React.ComponentType<P>\n): React.ComponentClass<P> {\n  return class ExpoRootComponent extends React.Component<P> {\n    render() {\n      const props = {\n        ...this.props,\n        exp: { ...this.props.exp, errorRecovery: ErrorRecovery.recoveredProps },\n      };\n\n      return <AppRootComponent {...props} />;\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}