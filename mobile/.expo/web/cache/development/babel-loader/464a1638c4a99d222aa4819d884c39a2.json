{"ast":null,"code":"var _jsxFileName = \"/Users/jaconcondes/Desktop/ephemeral-mobile-mail-client/mobile/App.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { Component } from 'react';\nimport { AppLoading } from 'expo';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Root from \"./Root\";\nimport AppNavigation from \"./navigation/AppNavigation\";\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nfunction cacheFonts(fonts) {\n  return fonts.map(font => Font.loadAsync({\n    Roboto: require('native-base/Fonts/Roboto.ttf'),\n    Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n  }));\n}\n\nexport default class AppContainer extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isReady: false\n    };\n  }\n\n  _loadAssetsAsync() {\n    return _asyncToGenerator(function* () {\n      var imageAssets = cacheImages(['https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png', require(\"./assets/splash.png\")]);\n      var fontAssets = cacheFonts([FontAwesome.font]);\n      yield Promise.all([...imageAssets, ...fontAssets]);\n    })();\n  }\n\n  render() {\n    if (!this.state.isReady) {\n      return React.createElement(AppLoading, {\n        startAsync: this._loadAssetsAsync,\n        onFinish: () => this.setState({\n          isReady: true\n        }),\n        onError: console.warn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return React.createElement(Root, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, React.createElement(AppNavigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jaconcondes/Desktop/ephemeral-mobile-mail-client/mobile/App.js"],"names":["React","Component","AppLoading","FontAwesome","Asset","Font","Root","AppNavigation","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","cacheFonts","fonts","font","loadAsync","Roboto","require","Roboto_medium","AppContainer","state","isReady","_loadAssetsAsync","imageAssets","fontAssets","Promise","all","render","setState","console","warn"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,UAAR,QAAyB,MAAzB;AACA,SAAQC,WAAR,QAA0B,oBAA1B;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;AAGA,OAAOC,IAAP;AAIA,OAAOC,aAAP;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOA,MAAM,CAACC,GAAP,CAAWC,KAAK,IAAI;AACzB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOP,KAAK,CAACU,UAAN,CAAiBH,KAAjB,EAAwBI,aAAxB,EAAP;AACD;AACF,GANM,CAAP;AAOD;;AAED,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAOA,KAAK,CAACP,GAAN,CAAUQ,IAAI,IACnBb,IAAI,CAACc,SAAL,CAAe;AACbC,IAAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADF;AAEbC,IAAAA,aAAa,EAAED,OAAO,CAAC,qCAAD;AAFT,GAAf,CADK,CAAP;AAMD;;AAED,eAAe,MAAME,YAAN,SAA2BtB,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAClDuB,KADkD,GAC1C;AACNC,MAAAA,OAAO,EAAE;AADH,KAD0C;AAAA;;AAK5CC,EAAAA,gBAAN,GAAyB;AAAA;AACvB,UAAMC,WAAW,GAAGnB,WAAW,CAAC,CAC9B,oFAD8B,EAE9Ba,OAAO,uBAFuB,CAAD,CAA/B;AAKA,UAAMO,UAAU,GAAGZ,UAAU,CAAC,CAACb,WAAW,CAACe,IAAb,CAAD,CAA7B;AAEA,YAAMW,OAAO,CAACC,GAAR,CAAY,CAAC,GAAGH,WAAJ,EAAiB,GAAGC,UAApB,CAAZ,CAAN;AARuB;AASxB;;AAEDG,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKP,KAAL,CAAWC,OAAhB,EAAyB;AACvB,aACE,oBAAC,UAAD;AACE,QAAA,UAAU,EAAE,KAAKC,gBADnB;AAEE,QAAA,QAAQ,EAAE,MAAM,KAAKM,QAAL,CAAc;AAACP,UAAAA,OAAO,EAAE;AAAV,SAAd,CAFlB;AAGE,QAAA,OAAO,EAAEQ,OAAO,CAACC,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;AAED,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAOD;;AAlCiD","sourcesContent":["import React, {Component} from 'react';\nimport {AppLoading} from 'expo';\nimport {FontAwesome} from '@expo/vector-icons';\nimport {Asset} from 'expo-asset';\nimport * as Font from 'expo-font';\nimport {Image} from 'react-native';\n// import { Provider } from 'react-redux'\nimport Root from './Root';\n\n// import store from './redux/store'\n\nimport AppNavigation from './navigation/AppNavigation';\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nfunction cacheFonts(fonts) {\n  return fonts.map(font =>\n    Font.loadAsync({\n      Roboto: require('native-base/Fonts/Roboto.ttf'),\n      Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),\n    }),\n  );\n}\n\nexport default class AppContainer extends Component {\n  state = {\n    isReady: false,\n  };\n\n  async _loadAssetsAsync() {\n    const imageAssets = cacheImages([\n      'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png',\n      require('./assets/splash.png'),\n    ]);\n\n    const fontAssets = cacheFonts([FontAwesome.font]);\n\n    await Promise.all([...imageAssets, ...fontAssets]);\n  }\n\n  render() {\n    if (!this.state.isReady) {\n      return (\n        <AppLoading\n          startAsync={this._loadAssetsAsync}\n          onFinish={() => this.setState({isReady: true})}\n          onError={console.warn}\n        />\n      );\n    }\n\n    return (\n      <Root>\n        {/* <Provider store={store}> */}\n        <AppNavigation />\n        {/* </Provider> */}\n      </Root>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}