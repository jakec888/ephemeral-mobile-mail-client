{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { loadAsync } from \"./Font\";\nexport function useFonts(map) {\n  var [loaded, setLoaded] = useState(false);\n  var [error, setError] = useState(null);\n  useEffect(() => {\n    loadAsync(map).then(() => setLoaded(true)).catch(setError);\n  }, []);\n  return [loaded, error];\n}","map":{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AAEA,SAAS,SAAT;AAaA,OAAM,SAAU,QAAV,CACJ,GADI,EAC8C;AAElD,MAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAC,KAAD,CAApC;AACA,MAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAe,IAAf,CAAlC;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,SAAS,CAAC,GAAD,CAAT,CACG,IADH,CACQ,MAAM,SAAS,CAAC,IAAD,CADvB,EAEG,KAFH,CAES,QAFT;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(\n  map: string | { [fontFamily: string]: FontSource }\n): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return [loaded, error];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}