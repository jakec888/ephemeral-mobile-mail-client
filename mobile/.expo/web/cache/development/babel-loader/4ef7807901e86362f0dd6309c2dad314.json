{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { CodedError } from '@unimodules/core';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport FontObserver from 'fontfaceobserver';\nimport { FontDisplay } from \"./Font.types\";\n\nfunction getFontFaceStyleSheet() {\n  if (!canUseDOM) {\n    return null;\n  }\n\n  var styleSheet = getStyleElement();\n  return styleSheet.sheet ? styleSheet.sheet : null;\n}\n\nfunction getFontFaceRules() {\n  var sheet = getFontFaceStyleSheet();\n\n  if (sheet) {\n    var rules = [...sheet.cssRules];\n    var items = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({\n          rule,\n          index: i\n        });\n      }\n    }\n\n    return items;\n  }\n\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(fontFamilyName, options) {\n  var rules = getFontFaceRules();\n  return rules.filter((_ref) => {\n    var {\n      rule\n    } = _ref;\n    return rule.style.fontFamily === fontFamilyName && (options && options.display ? options.display === rule.style.fontDisplay : true);\n  });\n}\n\nexport default {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n\n  unloadAllAsync() {\n    return _asyncToGenerator(function* () {\n      if (!canUseDOM) return;\n      var element = document.getElementById(ID);\n\n      if (element && element instanceof HTMLStyleElement) {\n        document.removeChild(element);\n      }\n    })();\n  },\n\n  unloadAsync(fontFamilyName, options) {\n    return _asyncToGenerator(function* () {\n      var sheet = getFontFaceStyleSheet();\n      if (!sheet) return;\n      var items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n\n      for (var item of items) {\n        sheet.deleteRule(item.index);\n      }\n    })();\n  },\n\n  loadAsync(fontFamilyName, resource) {\n    return _asyncToGenerator(function* () {\n      if (!canUseDOM) {\n        return;\n      }\n\n      var canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n\n      if (!canInjectStyle) {\n        throw new CodedError('ERR_WEB_ENVIRONMENT', \"The browser's `document.head` element doesn't support injecting fonts.\");\n      }\n\n      var style = _createWebStyle(fontFamilyName, resource);\n\n      document.head.appendChild(style);\n\n      if (!isFontLoadingListenerSupported()) {\n        return;\n      }\n\n      return new FontObserver(fontFamilyName, {\n        display: resource.display\n      }).load();\n    })();\n  }\n\n};\nvar ID = 'expo-generated-fonts';\n\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = \"@font-face {\\n    font-family: \".concat(fontFamily, \";\\n    src: url(\").concat(resource.uri, \");\\n    font-display: \").concat(resource.display || FontDisplay.AUTO, \";\\n  }\");\n  var styleElement = getStyleElement();\n\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported() {\n  var {\n    userAgent\n  } = window.navigator;\n  var isIOS = !!userAgent.match(/iPad|iPhone/i);\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  var isEdge = userAgent.includes('Edge');\n  var isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isFirefox;\n}","map":{"version":3,"sources":["../src/ExpoFontLoader.web.ts"],"names":[],"mappings":";;;;AAAA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,SAAT,QAA0B,+BAA1B;AACA,OAAO,YAAP,MAAyB,kBAAzB;AAGA,SAAS,WAAT;;AAEA,SAAS,qBAAT,GAA8B;AAC5B,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,MAAM,UAAU,GAAG,eAAe,EAAlC;AACA,SAAO,UAAU,CAAC,KAAX,GAAoB,UAAU,CAAC,KAA/B,GAAyD,IAAhE;AACD;;AAID,SAAS,gBAAT,GAAyB;AACvB,MAAM,KAAK,GAAG,qBAAqB,EAAnC;;AACA,MAAI,KAAJ,EAAW;AAET,QAAM,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,QAAV,CAAd;AAEA,QAAM,KAAK,GAAe,EAA1B;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,UAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;;AACA,UAAI,IAAI,YAAY,eAApB,EAAqC;AACnC,QAAA,KAAK,CAAC,IAAN,CAAW;AAAE,UAAA,IAAF;AAAQ,UAAA,KAAK,EAAE;AAAf,SAAX;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AACD,SAAO,EAAP;AACD;;AAED,SAAS,gCAAT,CACE,cADF,EAEE,OAFF,EAE6B;AAE3B,MAAM,KAAK,GAAG,gBAAgB,EAA9B;AACA,SAAO,KAAK,CAAC,MAAN,CAAa,UAAa;AAAA,QAAZ;AAAE,MAAA;AAAF,KAAY;AAC/B,WACE,IAAI,CAAC,KAAL,CAAW,UAAX,KAA0B,cAA1B,KACC,OAAO,IAAI,OAAO,CAAC,OAAnB,GAA6B,OAAO,CAAC,OAAR,KAAqB,IAAI,CAAC,KAAL,CAAmB,WAArE,GAAmF,IADpF,CADF;AAID,GALM,CAAP;AAMD;;AAED,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,gBAAP;AACD,GAHY;;AAKP,EAAA,cAAN,GAAoB;AAAA;AAClB,UAAI,CAAC,SAAL,EAAgB;AAEhB,UAAM,OAAO,GAAG,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAAhB;;AACA,UAAI,OAAO,IAAI,OAAO,YAAY,gBAAlC,EAAoD;AAClD,QAAA,QAAQ,CAAC,WAAT,CAAqB,OAArB;AACD;AANiB;AAOnB,GAZY;;AAcP,EAAA,WAAN,CAAkB,cAAlB,EAA0C,OAA1C,EAAqE;AAAA;AACnE,UAAM,KAAK,GAAG,qBAAqB,EAAnC;AACA,UAAI,CAAC,KAAL,EAAY;AACZ,UAAM,KAAK,GAAG,gCAAgC,CAAC,cAAD,EAAiB,OAAjB,CAA9C;;AACA,WAAK,IAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,QAAA,KAAK,CAAC,UAAN,CAAiB,IAAI,CAAC,KAAtB;AACD;AANkE;AAOpE,GArBY;;AAuBP,EAAA,SAAN,CAAgB,cAAhB,EAAwC,QAAxC,EAA8D;AAAA;AAC5D,UAAI,CAAC,SAAL,EAAgB;AACd;AACD;;AAED,UAAM,cAAc,GAAG,QAAQ,CAAC,IAAT,IAAiB,OAAO,QAAQ,CAAC,IAAT,CAAc,WAArB,KAAqC,UAA7E;;AACA,UAAI,CAAC,cAAL,EAAqB;AACnB,cAAM,IAAI,UAAJ,CACJ,qBADI,2EAAN;AAID;;AAED,UAAM,KAAK,GAAG,eAAe,CAAC,cAAD,EAAiB,QAAjB,CAA7B;;AACA,MAAA,QAAQ,CAAC,IAAT,CAAe,WAAf,CAA2B,KAA3B;;AAEA,UAAI,CAAC,8BAA8B,EAAnC,EAAuC;AACrC;AACD;;AAED,aAAO,IAAI,YAAJ,CAAiB,cAAjB,EAAiC;AAAE,QAAA,OAAO,EAAE,QAAQ,CAAC;AAApB,OAAjC,EAAgE,IAAhE,EAAP;AApB4D;AAqB7D;;AA5CY,CAAf;AA+CA,IAAM,EAAE,GAAG,sBAAX;;AAEA,SAAS,eAAT,GAAwB;AACtB,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAAhB;;AACA,MAAI,OAAO,IAAI,OAAO,YAAY,gBAAlC,EAAoD;AAClD,WAAO,OAAP;AACD;;AACD,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAArB;AACA,EAAA,YAAY,CAAC,EAAb,GAAkB,EAAlB;AACA,EAAA,YAAY,CAAC,IAAb,GAAoB,UAApB;AACA,SAAO,YAAP;AACD;;AAED,SAAS,eAAT,CAAyB,UAAzB,EAA6C,QAA7C,EAAmE;AACjE,MAAM,SAAS,4CACE,UADF,6BAEF,QAAQ,CAAC,GAFP,mCAGG,QAAQ,CAAC,OAAT,IAAoB,WAAW,CAAC,IAHnC,WAAf;AAMA,MAAM,YAAY,GAAG,eAAe,EAApC;;AAGA,MAAI,YAAY,CAAC,UAAjB,EAA6B;AAC3B,QAAM,cAAc,GAAG,YAAvB;AACA,IAAA,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAAoC,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAChC,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAAoC,SADJ,GAEhC,SAFJ;AAGD,GALD,MAKO;AACL,QAAM,QAAQ,GAAG,QAAQ,CAAC,cAAT,CAAwB,SAAxB,CAAjB;AACA,IAAA,YAAY,CAAC,WAAb,CAAyB,QAAzB;AACD;;AACD,SAAO,YAAP;AACD;;AAED,SAAS,8BAAT,GAAuC;AACrC,MAAM;AAAE,IAAA;AAAF,MAAgB,MAAM,CAAC,SAA7B;AAEA,MAAM,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,KAAV,CAAgB,cAAhB,CAAhB;AACA,MAAM,QAAQ,GAAG,iCAAiC,IAAjC,CAAsC,SAAS,CAAC,SAAhD,CAAjB;AAEA,MAAM,MAAM,GAAG,SAAS,CAAC,QAAV,CAAmB,MAAnB,CAAf;AAEA,MAAM,SAAS,GAAG,SAAS,CAAC,QAAV,CAAmB,SAAnB,CAAlB;AACA,SAAO,CAAC,QAAD,IAAa,CAAC,KAAd,IAAuB,CAAC,MAAxB,IAAkC,CAAC,SAA1C;AACD","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport FontObserver from 'fontfaceobserver';\n\nimport { UnloadFontOptions } from './Font';\nimport { FontDisplay, FontResource } from './Font.types';\n\nfunction getFontFaceStyleSheet(): CSSStyleSheet | null {\n  if (!canUseDOM) {\n    return null;\n  }\n  const styleSheet = getStyleElement();\n  return styleSheet.sheet ? (styleSheet.sheet as CSSStyleSheet) : null;\n}\n\ntype RuleItem = { rule: CSSFontFaceRule; index: number };\n\nfunction getFontFaceRules(): RuleItem[] {\n  const sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    // @ts-ignore: rule iterator\n    const rules = [...sheet.cssRules];\n\n    const items: RuleItem[] = [];\n\n    for (let i = 0; i < rules.length; i++) {\n      const rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({ rule, index: i });\n      }\n    }\n    return items;\n  }\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(\n  fontFamilyName: string,\n  options?: UnloadFontOptions\n): RuleItem[] {\n  const rules = getFontFaceRules();\n  return rules.filter(({ rule }) => {\n    return (\n      rule.style.fontFamily === fontFamilyName &&\n      (options && options.display ? options.display === (rule.style as any).fontDisplay : true)\n    );\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async unloadAllAsync(): Promise<void> {\n    if (!canUseDOM) return;\n\n    const element = document.getElementById(ID);\n    if (element && element instanceof HTMLStyleElement) {\n      document.removeChild(element);\n    }\n  },\n\n  async unloadAsync(fontFamilyName: string, options?: UnloadFontOptions): Promise<void> {\n    const sheet = getFontFaceStyleSheet();\n    if (!sheet) return;\n    const items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n    for (const item of items) {\n      sheet.deleteRule(item.index);\n    }\n  },\n\n  async loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (!canUseDOM) {\n      return;\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new CodedError(\n        'ERR_WEB_ENVIRONMENT',\n        `The browser's \\`document.head\\` element doesn't support injecting fonts.`\n      );\n    }\n\n    const style = _createWebStyle(fontFamilyName, resource);\n    document.head!.appendChild(style);\n\n    if (!isFontLoadingListenerSupported()) {\n      return;\n    }\n\n    return new FontObserver(fontFamilyName, { display: resource.display }).load();\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = `@font-face {\n    font-family: ${fontFamily};\n    src: url(${resource.uri});\n    font-display: ${resource.display || FontDisplay.AUTO};\n  }`;\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported(): boolean {\n  const { userAgent } = window.navigator;\n  // WebKit is broken https://github.com/bramstein/fontfaceobserver/issues/95\n  const isIOS = !!userAgent.match(/iPad|iPhone/i);\n  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  // Edge is broken https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n  const isEdge = userAgent.includes('Edge');\n  // Firefox\n  const isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isFirefox;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}